{
    "contents" : "library(DESeq2)\n\n\nsetClass(\"GSTTResults\",\n\trepresentation(best.pvals.set=\"numeric\",\n\t\tbest.pvals.gene=\"numeric\",\n\t\tgene.sets=\"list\",\n\t\tsets.pvals=\"numeric\",\n\t\tgenes.pvals=\"numeric\",\n\t\tsets_table_1=\"matrix\",\n\t\tsets_table_.05=\"matrix\"),\n\tprototype(best.pvals.set=NULL, best.pvals.gene=NULL, gene.sets=NULL, sets.pvals=NULL, genes.pvals=NULL))\n\n\nsetClass(\"GSTTDataSet\",\n\trepresentation(dds=\"DESeqDataSet\",\n\t\tdds.contrast=\"ANY\",\n\t\tdds.results=\"DESeqResults\",\n\t\tcol.groups=\"list\",\n\t\tpermuted.results=\"list\"),\n\tprototype(dds=NULL, dds.results=NULL, col.groups=NULL, permuted.results=NULL, dds.contrast=NULL))\n\n\n\n\nmakeData <- function() {\n        m <- as.matrix(read.table('transcripts.counts.matrix'))\n        all_genes <- row.names(m)\n        colData = data.frame(row.names=colnames(m),replicate=c(11,11,11,12,12,12,13,13,13), time=rep(c(0,15,60),3))\n        colData$time <- factor(colData$time, levels=c(0,15,60))\n\tcounts <- round(m)\n\tdds <- DESeqDataSetFromMatrix(countData=counts, colData=colData, design = ~ time)\n\tgds <- new(\"GSTTDataSet\")\n\tgds@dds <- dds\n\tgds@col.groups <- list(c(1,4,7),c(3,6,9))\n\tgds@dds.contrast <- c(\"time\",60,0)\n\treturn(gds)\n}\n\nGSTTDataSetFromMatrix <- function(countData, colData, design, ...) {\n  dds <- DESeqDataSetFromMatrix(countData=countData, colData=colData, design=design, ...)\n  gds <- new(\"GSTTDataSet\")\n  gds@dds <- dds\n  # cfac <- getContrast(dds, design=design)\n  # gds@col.groups <- \n  # gds@dds.contrast <- c(\"time\",60,0)\n  return(gds)\n}\n  \n\nsampleData <- function() {\n\tlibrary(\"pasilla\")\n\tlibrary(\"Biobase\")\n\tdata(\"pasillaGenes\")\n\tcountData <- counts(pasillaGenes)\n\t countData <- countData[1:5000,]\n\tcolData <- pData(pasillaGenes)[,c(\"condition\",\"type\")]\n\tdds <- DESeqDataSetFromMatrix(countData= countData,colData= colData,design= ~ condition)\n\tdds$condition <- factor(dds$condition,levels=c(\"untreated\",\"treated\"))\n        gds <- new(\"GSTTDataSet\")\n        gds@dds <- dds\n\tgds@dds.contrast <- c(\"condition\",\"treated\",\"untreated\")\n\tgds@col.groups <- list(c(1,2,3),c(4,5,6,7))\n\treturn(gds)\n}\n\n\n#' Compute the differential expression for all permutations for a GSTTDataSet object\n#' \n#' \\code{diff.exp} runs DESeq for the dataset and all its sample permutations needed to get\n#' the gene set significance levels.\n#' \n#' @param object an object of class GSTTDataSet\n#' @return an object of class GSTTDataSet with the p-values computed for all sample permutations\n#' @export\ndiff.exp <- function(object) {\n\tif (is.null(object@dds)) {\n\t\tprint(\"Need data set! Exiting ...\")\n\t\treturn(object)\n\t}\n\tobject@dds <- DESeq(object@dds)\n\tobject@dds.results = results(object@dds, object@dds.contrast)\n\tobject@dds.results[,\"zscore\"] <- qnorm(1-object@dds.results[,\"pvalue\"]/2)\n\tobject@dds.results[which(object@dds.results[,\"zscore\"]>10),\"zscore\"] = 10\n\treturn(object)\n}\n\t\n\nget.balanced.permutations <- function(cases, controls) {\n\tgetgroups <- function(ii, case1s, control1s) {\n\t\tcaseInd = ii[[1]]\n\t\tcontrolInd = ii[[2]] \n\t\tnoOverlap <- function(vec1, vec2) {!any(vec1 %in% vec2)}\n\t\tcaseCond = sapply(seq_len(caseInd), function(x) noOverlap(case1s[x],case1s[caseInd]))\n\t\tcontrolCond = sapply(seq_len(length(control1s)), function(x) noOverlap(control1s[x],control1s[controlInd]))\n\t\n\t\tcase2 = case1s[1:caseInd][caseCond]\n\t\tcontrol2 = control1s[controlCond]\n\t\tif ((length(case2)<1)||(length(control2)<1))\n\t\t\treturn(list())\n\t\n\t\tgr2inds = simplify2array(apply(as.matrix(expand.grid(seq_len(length(case2)),seq_len(length(control2)))),1,list))\n\t\n\t\tlistOfBothGroups <- lapply(gr2inds, function(x) list(group1=unlist(c(case1s[caseInd],control1s[controlInd])),group2=unlist(c(case2[x[1]],control2[x[2]]))))\n\t\treturn(listOfBothGroups)\n\t}\n\tnEach <- floor(min(length(cases),length(controls))/2)\n\tnCases <- length(cases)\n\tnControls <- length(controls)\n\tpermutations <- list()\n\tcase1s <- combn(cases, nEach) # possible samples from the cases for group 1\n\tcase1s <- lapply(seq_len(ncol(case1s)), function(i) {case1s[,i]}) # transform to a list of vectors\n\n\tcontrol1s <- combn(controls, nEach) # possible samples from the controls for group 1\n\tcontrol1s <- lapply(seq_len(ncol(control1s)), function(i) {control1s[,i]}) # transform to a list of vectors\n\n\tallPairs <- simplify2array(apply(as.matrix(expand.grid(seq_len(length(case1s)),seq_len(length(control1s)))), 1, list))\n\tlistOfGroups <- sapply(allPairs, function(x) getgroups(x,case1s,control1s))\n\treturn(unlist(listOfGroups,recursive=F))\n}\n\n\nread.sets <- function(fname) {\n\treadOneSet <- function(line) {\n\t\tw = strsplit(line, \"\\t\")\n\t\tlist(w[[1]][1], w[[1]][-1])\n\t}\n\tf = file(fname, \"r\")\n\tgene_sets <- lapply(readLines(f, warn=FALSE), readOneSet)\n\tnames(gene_sets) <- sapply(gene_sets, function(x) x[[1]])\n\tclose(f)\n\treturn(gene_sets)\n}\n\n\nget.permuted.results <- function(object) {\n\tif (is.null(object@dds.results)) object <- diff.exp(object)\n\tperm_results = list()\n\tcol.data <- colData(object@dds)\n\ti=0\n\tfor (perm in get.balanced.permutations(object@col.groups[[1]], object@col.groups[[2]])) {\n\t\ti <- i+1\n\t\tgroups = rep(0,nrow(col.data))\n\t\tfor (g1 in perm$group1) groups[g1] = 1\n\t\tfor (g2 in perm$group2) groups[g2] = 2\n\t\tcol.data$group <- factor(groups, levels=c(1,2,0))\n\t\tpdds <- DESeqDataSetFromMatrix(countData=counts(object@dds), colData=col.data, design = ~ group)\n\t\tpdds <- DESeq(pdds)\n\t\tresPerm <- results(pdds,contrast=c(\"group\" ,1, 2))\n\t\tresPerm[,\"zscore\"] <- qnorm(1-resPerm[,\"pvalue\"]/2)\n\t\tresPerm[which(resPerm[,\"zscore\"]>10),\"zscore\"] = 10\n\t\tperm_results[i] <- resPerm\n\t}\n\tobject@permuted.results <- perm_results\n\treturn(object)\n}\n\nget.gstt.results <- function(object, gene_sets) {\n\tif (is.null(object@permuted.results)) {\n\t\tobject <- get.permuted.results(object)\n\t}\n\n\tbestGene_pvals = c()\n\tbestPathway_pvals = c()\n\t\n\tperm_gene_pvals = list()\n\tperm_path_pvals = list()\n\ti=0\n\tfor (resPerm in object@permuted.results) {\n\t\ti <- i+1\n\t\tif (!(\"zscore\" %in% colnames(resPerm))) {\n\t\t\tresPerm[,\"zscore\"] <- qnorm(1-resPerm[,\"pvalue\"]/2)\n\t\t\tresPerm[which(resPerm[,\"zscore\"]>10),\"zscore\"] = 10\n\t\t}\n\t\tall_genes <- row.names(resPerm)\n\t\tperm_gene_pvals[[i]] <- resPerm[,\"pvalue\"]\n\t\tbestGene_pvals <- c(bestGene_pvals, min(perm_gene_pvals[[i]], na.rm=T))\n\t\tperm_path_pvals[[i]] <- sapply(gene_sets, function(x) if (sum(!is.na(resPerm[x[[2]],\"pvalue\"]))>0) t.test(resPerm[x[[2]],\"zscore\"], resPerm[setdiff(all_genes,x[[2]]),\"zscore\"],var.equal=T)$p.value else NA)\n\t\tbestPathway_pvals <- c(bestPathway_pvals, min(perm_path_pvals[[i]], na.rm=T))\n\t\tprint(\"got pathway pvals\")\n\t}\n\n\t\n\tPathway_pvals <- sapply(gene_sets, function(x) if (sum(!is.na(object@dds.results[x[[2]],\"pvalue\"]))>0) t.test(object@dds.results[x[[2]],\"zscore\"], object@dds.results[setdiff(all_genes,x[[2]]),\"zscore\"],var.equal=T)$p.value else NA)\n\tgene_names <- row.names(object@dds.results)\n\n\tpath_fdr_1_pval <- median(bestPathway_pvals)\n\tpath_fdr_.05_pval <- quantile(bestPathway_pvals, 0.05)\n\tpath_fdr_1 <- sapply(which(Pathway_pvals < path_fdr_1_pval), function(ii) gene_sets[[ii]][[1]])\n\tpath_fdr_.05 <- sapply(which(Pathway_pvals < path_fdr_.05_pval), function(ii) gene_sets[[ii]][[1]])\n\n\tgene_fdr_.05_pval <- quantile(bestGene_pvals, .05)\n\tgene_fdr_.05 <- sapply(which(object@dds.results[,\"pvalue\"]<gene_fdr_.05_pval), function(ii) gene_names[ii])\n\tgene_fdr_1_pval <- median(bestGene_pvals)\n\tgene_fdr_1 <- sapply(which(object@dds.results[,\"pvalue\"]<gene_fdr_1_pval), function(ii) gene_names[ii])\n\n\tgene_sets_.05 <- lapply(gene_sets, function(x) list(x[[1]],x[[2]],length(intersect(x[[2]], gene_fdr_.05))))\n\tsets_table_.05 <- outer(path_fdr_.05, path_fdr_.05, Vectorize(function(x,y) {list(intersect(intersect(gene_sets_.05[[x]][[2]],gene_sets_.05[[y]][[2]]),gene_fdr_.05))}))\n\tgene_sets_1 <- lapply(gene_sets, function(x) list(x[[1]], x[[2]],length(intersect(x[[2]], gene_fdr_1))))\n\tsets_table_1 <- outer(path_fdr_1, path_fdr_1, Vectorize(function(x,y) {list(intersect(intersect(gene_sets_1[[x]][[2]],gene_sets_1[[y]][[2]]),gene_fdr_1))}))\n\n\tgsr <- new(\"GSTTResults\")\n\tgsr@best.pvals.set  <- bestPathway_pvals\n\tgsr@best.pvals.gene <- bestGene_pvals\n\tgsr@gene.sets <- gene_sets\n\tgsr@sets.pvals <- Pathway_pvals\n\tgsr@genes.pvals <- object@dds.results[,\"pvalue\"]\n\tnames(gsr@genes.pvals) <- rownames(object@dds.results)\n\t\n\tgsr@sets_table_1 <- sets_table_1\n\tgsr@sets_table_.05 <- sets_table_.05\n\treturn(gsr)\n}\n\nget.sets.table <- function(gsr, fwer)\n{\n\tpath_fwer_pval <- quantile(gsr@best.pvals.set, fwer)\n\tpath_fwer <- sapply(which(gsr@sets.pvals < path_fwer_pval), function(ii) gsr@gene.sets[[ii]][[1]])\n\n\tgene_fwer_pval <- quantile(gsr@best.pvals.gene, fwer)\n\tgene_fwer <- names(which(gsr@genes.pvals<gene_fwer_pval))\n\n\tgene_sets <- lapply(gsr@gene.sets, function(x) list(x[[1]],x[[2]],length(intersect(x[[2]], gene_fwer))))\n\tsets_table <- outer(path_fwer, path_fwer, Vectorize(function(x,y) {length(intersect(gsr@gene.sets[[x]][[2]], gsr@gene.sets[[y]][[2]]))/length(union(gsr@gene.sets[[x]][[2]], gsr@gene.sets[[y]][[2]]))}))\n\trownames(sets_table) <- path_fwer\n\tcolnames(sets_table) <- path_fwer\n\th <- hclust(as.dist(1-sets_table))\n\tsets_table <- sets_table[h$order, h$order]\n\treturn(sets_table)\n}\n",
    "created" : 1402021244715.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1081502558",
    "id" : "AC0E057D",
    "lastKnownWriteTime" : 1402030382,
    "path" : "~/work/GSTT/R/doGSA.R",
    "project_path" : "R/doGSA.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}